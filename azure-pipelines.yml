# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- master
- feature/*

variables:
  dockerRegisteryServiceConnection: 'privateRegistery'
  imageRepository: 'weight-tracker-app'
  containerRegistery: 'oribootcampacr.azurecr.io'
  dockerfilePath: '$(Build.SourcesDirectory)/Dockerfile'
  tag: '$(Build.BuildNumber)'

pool: MyPool

stages:

# Continuous Integration Process
- stage: CI
  jobs:
  - job: BuildAndPushDocker
    workspace: 
      clean: all
    steps: 
    - task: Docker@2
      displayName: Build and Push on Master branch
      condition: eq(variables['Build.SourceBranch'], 'refs/heads/master')
      inputs:
        containerRegistry: $(dockerRegisteryServiceConnection)
        repository: $(imageRepository)
        command: 'buildAndPush'
        Dockerfile: $(dockerfilePath)
        tags: |
          $(tag)
    - task: Docker@2
      displayName: Build on Feature branch
      condition: ne(variables['Build.SourceBranch'], 'refs/heads/master')
      inputs:
        command: 'build'
        Dockerfile: '**/Dockerfile'

- stage: Deploy_Staging
  condition: and(succeeded(), eq(variables['build.sourceBranch'], 'refs/heads/master'))
  displayName: Deploy Staging
  jobs:
    - deployment: Deploy_Staging
      variables:
      - group:  StagingVars
      environment: 
        name: StagingEnv
        resourceType: VirtualMachine
      displayName: Deploy
      strategy:
         runOnce:
           deploy:
             steps:
             - task: CmdLine@2
               inputs:
                 script: |
                   curl -fsSL https://get.docker.com -o get-docker.sh && chmod u+x get-docker.sh && ./get-docker.sh && sudo chmod 666 /var/run/docker.sock && sudo chown adminuser:docker /var/run/docker.sock
             - task: Docker@2
               inputs:
                 containerRegistry: $(dockerRegisteryServiceConnection)
                 command: 'login'
             - task: CmdLine@2
               displayName: Delete previous Containers and Images
               continueOnError: true
               inputs:
                script: |
                  docker rm -f $(docker ps -qa)
                  docker rmi -f $(docker images -qa)
             - task: CmdLine@2
               displayName: Pull image
               inputs:
                 script: 'docker pull $(containerRegistery)/$(imageRepository):$(tag)'
             - task: CmdLine@2
               displayName: Run the docker image
               inputs:
                 script: |
                   docker run -d --name=appContainer --restart always -p 8080:8080 -e PORT=$(PORT) -e HOST=$(HOST) -e PGHOST=$(PGHOST) -e PGUSERNAME=$(PGUSERNAME) -e PGDATABASE=$(PGDATABASE) -e PGPASSWORD=$(PGPASSWORD) -e PGPORT=$(PGPORT) -e HOST_URL=$(HOST_URL) -e COOKIE_ENCRYPT_PWD=$(COOKIE_ENCRYPT_PWD) -e NODE_ENV=$(NODE_ENV) -e OKTA_ORG_URL=$(OKTA_ORG_URL) -e OKTA_CLIENT_ID=$(OKTA_CLIENT_ID) -e OKTA_CLIENT_SECRET=$(OKTA_CLIENT_SECRET) $(containerRegistery)/$(imageRepository):$(tag)
                  
- stage: Deploy_Production
  condition: and(succeeded(), eq(variables['build.sourceBranch'], 'refs/heads/master'))
  displayName: Deploy Production
  jobs:
    - deployment: Deploy_Production
      variables:
      - group:  ProductionVars
      environment: 
        name: ProductionEnv
        resourceType: VirtualMachine
      displayName: Deploy
      strategy:
         runOnce:
           deploy:
             steps:
             - task: CmdLine@2
               inputs:
                 script: |
                   curl -fsSL https://get.docker.com -o get-docker.sh && chmod u+x get-docker.sh && ./get-docker.sh && sudo chmod 666 /var/run/docker.sock && sudo chown adminuser:docker /var/run/docker.sock
             - task: Docker@2
               inputs:
                 containerRegistry: $(dockerRegisteryServiceConnection)
                 command: 'login'
             - task: CmdLine@2
               displayName: Delete previous Containers and Images
               inputs:
                script: |
                  docker rm -f $(docker ps -qa)
                  docker rmi $(docker images -q)
             - task: CmdLine@2
               displayName: Pull image
               inputs:
                 script: 'docker pull $(containerRegistery)/$(imageRepository):$(tag)'
             - task: CmdLine@2
               displayName: Run the docker image
               inputs:
                 script: |
                   docker run -d --name=appContainer --restart always -p 8080:8080 -e PORT=$(PORT) -e HOST=$(HOST) -e PGHOST=$(PGHOST) -e PGUSERNAME=$(PGUSERNAME) -e PGDATABASE=$(PGDATABASE) -e PGPASSWORD=$(PGPASSWORD) -e PGPORT=$(PGPORT) -e HOST_URL=$(HOST_URL) -e COOKIE_ENCRYPT_PWD=$(COOKIE_ENCRYPT_PWD) -e NODE_ENV=$(NODE_ENV) -e OKTA_ORG_URL=$(OKTA_ORG_URL) -e OKTA_CLIENT_ID=$(OKTA_CLIENT_ID) -e OKTA_CLIENT_SECRET=$(OKTA_CLIENT_SECRET) $(containerRegistery)/$(imageRepository):$(tag)                  